var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.12,1,1.894]],["body/controllers/AppController.html",[0,1.831,1,3.096,2,1.488,3,0.498,4,0.429,5,0.429,6,3.326,7,0.613,8,0.038,9,1.004,10,2.679,11,3.326,12,0.498,13,0.024,14,4.029,15,1.813,16,3.326,17,1.11,18,1.641,19,4.029,20,0.031,21,0.031]],["title/modules/AppModule.html",[22,1.12,23,1.894]],["body/modules/AppModule.html",[1,3.013,2,1.583,3,0.397,4,0.342,5,0.342,7,0.682,8,0.038,9,0.801,10,2.752,11,2.651,12,0.397,13,0.019,20,0.026,21,0.026,22,1.781,23,3.711,24,1.446,25,1.446,26,1.786,27,1.786,28,1.446,29,2.682,30,1.786,31,2.651,32,2.651,33,2.651,34,2.752,35,3.067,36,2.482,37,2.383,38,1.786,39,1.603,40,3.212,41,2.677,42,3.212,43,3.212,44,3.212,45,3.212]],["title/injectables/AppService.html",[10,1.513,46,1.12]],["body/injectables/AppService.html",[3,0.504,4,0.435,5,0.435,7,0.504,8,0.037,9,1.017,10,2.493,12,0.504,13,0.024,16,4.644,17,1.377,18,1.662,20,0.031,21,0.031,46,1.845,47,2.269,48,3.369,49,0.825,50,2.493,51,1.125,52,4.081,53,2.036,54,4.081,55,4.081]],["title/controllers/AuthController.html",[0,1.12,56,1.894]],["body/controllers/AuthController.html",[0,1.52,2,1.52,3,0.509,4,0.439,5,0.439,7,0.621,8,0.038,9,1.026,12,0.509,13,0.024,15,1.853,20,0.031,21,0.031,56,3.137,57,3.398,58,2.925,59,4.116,60,2.439,61,3.398,62,4.116,63,2.054,64,2.054,65,2.054,66,2.054]],["title/modules/AuthModule.html",[22,1.12,34,1.513]],["body/modules/AuthModule.html",[2,1.623,3,0.412,4,0.355,5,0.355,7,0.671,8,0.037,9,0.832,12,0.543,13,0.02,20,0.027,21,0.027,22,1.815,24,1.978,25,1.502,26,1.855,27,1.855,28,1.502,29,2.733,30,2.733,34,2.836,36,2.212,37,2.444,38,1.855,39,1.665,41,2.084,56,3.07,60,2.718,61,2.754,67,2.754,68,2.754,69,2.754,70,3.336,71,2.745,72,3.336,73,2.754,74,2.37,75,1.118,76,3.336]],["title/injectables/AuthService.html",[46,1.12,60,1.365]],["body/injectables/AuthService.html",[3,0.357,4,0.308,5,0.308,7,0.493,8,0.038,9,0.72,12,0.357,13,0.017,15,1.301,17,1.621,18,1.625,20,0.025,21,0.025,46,1.473,47,1.607,49,0.584,50,1.991,51,1.259,53,1.991,60,1.796,63,1.991,64,1.442,65,1.442,66,1.442,71,1.805,75,1.871,77,2.385,78,2.972,79,3.293,80,3.989,81,2.385,82,2.89,83,2.54,84,2.28,85,1.259,86,1.861,87,3.989,88,2.89,89,4.926,90,2.89,91,3.989,92,3.771,93,1.861,94,2.89,95,2.385,96,2.385,97,2.385,98,2.385,99,1.805,100,1.442,101,2.385,102,1.805,103,2.385,104,3.989]],["title/classes/CreatePostDto.html",[13,0.018,105,1.686]],["body/classes/CreatePostDto.html",[3,0.201,4,0.173,5,0.173,7,0.532,8,0.038,12,0.201,13,0.019,17,1.422,20,0.016,21,0.016,49,0.328,51,1.294,85,1.534,86,1.056,105,1.441,106,0.661,107,3.44,108,1.153,109,1.318,110,3.212,111,3.236,112,3.556,113,3.556,114,3.236,115,4.04,116,4.04,117,3.335,118,1.913,119,1.622,120,2.601,121,2.488,122,4.696,123,1.622,124,2.523,125,1.339,126,3.696,127,2.592,128,3.876,129,3.732,130,2.592,131,1.841,132,1.622,133,2.592,134,2.299,135,3.236,136,2.139,137,1.622,138,1.622,139,1.622,140,1.841,141,2.139,142,1.622,143,1.622,144,2.139,145,1.622,146,3.696,147,1.622,148,2.592,149,2.592,150,2.592,151,2.592,152,2.592,153,2.592,154,2.592,155,1.622,156,1.339,157,1.622,158,1.622,159,1.622,160,3.696,161,4.04,162,4.307,163,1.622,164,1.622,165,1.622,166,1.622,167,2.592,168,2.69,169,2.299,170,2.87,171,1.339,172,2.592,173,0.73,174,1.622,175,1.622,176,1.013,177,1.153,178,1.622,179,1.153,180,2.824,181,3.051,182,0.661,183,1.339,184,1.699,185,1.622,186,1.622,187,1.622,188,1.622,189,1.153,190,1.339,191,1.339,192,2.299,193,1.339,194,1.622,195,2.021,196,1.622]],["title/classes/CreatePostMetaOptionDto.html",[13,0.018,124,1.894]],["body/classes/CreatePostMetaOptionDto.html",[3,0.41,4,0.353,5,0.353,7,0.541,8,0.037,12,0.41,13,0.026,17,1.436,20,0.027,21,0.027,49,0.669,51,1.206,85,1.206,106,1.349,107,3.48,109,1.782,118,1.782,120,1.969,121,2.345,124,2.733,134,3.702,156,2.735,168,3.06,170,3.108,173,1.491,177,3.48,180,3.06,182,1.349,184,1.865,192,3.849,195,3.383,197,2.735,198,5.21,199,3.313,200,3.313,201,3.611,202,3.313]],["title/classes/CreateUserDto.html",[13,0.018,203,1.686]],["body/classes/CreateUserDto.html",[3,0.293,4,0.253,5,0.253,7,0.428,8,0.037,12,0.293,13,0.021,17,1.461,20,0.021,21,0.021,49,0.479,51,1.321,84,2.392,85,1.321,92,3.957,95,3.957,100,2.742,106,0.966,109,1.412,118,1.953,121,2.474,168,2.994,170,3.201,171,1.957,173,1.067,180,3.127,182,0.966,183,1.957,184,1.607,203,1.927,204,4.133,205,1.684,206,3.406,207,3.406,208,2.028,209,2.371,210,3.466,211,2.371,212,2.371,213,3.466,214,2.371,215,2.371,216,2.861,217,2.861,218,2.371,219,2.371,220,3.466,221,3.466,222,3.466,223,3.466,224,3.466,225,3.466,226,5.302,227,3.466,228,4.506,229,3.466,230,3.466,231,2.371,232,3.466,233,2.371,234,1.957,235,3.466,236,2.371,237,3.466,238,2.861,239,2.371,240,2.371,241,2.371,242,2.371,243,2.371,244,2.371]],["title/classes/GetPostParamsDto.html",[13,0.018,245,2.154]],["body/classes/GetPostParamsDto.html",[3,0.435,4,0.375,5,0.375,7,0.435,8,0.037,12,0.435,13,0.027,17,1.47,20,0.028,21,0.028,49,0.712,51,1.39,85,1.39,86,2.305,93,2.055,106,1.434,109,1.855,118,2.055,168,3.332,169,3.79,173,1.585,208,2.049,238,4.165,245,3.235,246,2.907,247,3.152,248,2.806,249,3.522,250,3.522,251,4.553,252,3.522,253,3.522]],["title/classes/GetUserParamsDto.html",[13,0.018,254,1.686]],["body/classes/GetUserParamsDto.html",[3,0.356,4,0.307,5,0.307,7,0.564,8,0.038,12,0.356,13,0.027,17,1.097,18,1.622,20,0.025,21,0.025,49,0.582,51,1.257,85,1.56,86,2.004,93,2.103,100,1.986,106,1.174,109,1.622,118,1.858,121,2.214,125,3.286,131,2.828,136,3.286,169,3.496,173,1.297,179,2.047,181,3.765,182,1.174,184,1.334,206,2.047,207,2.047,208,2.663,247,2.849,248,2.536,254,2.214,255,2.378,256,2.487,257,2.881,258,2.881,259,3.286,260,2.881,261,2.881,262,2.881,263,2.881,264,4.92,265,2.881,266,2.378]],["title/classes/PatchPostDto.html",[13,0.018,267,1.894]],["body/classes/PatchPostDto.html",[3,0.465,4,0.4,5,0.4,7,0.587,8,0.037,12,0.465,13,0.022,20,0.029,21,0.029,49,0.759,51,1.036,85,1.036,93,2.295,105,2.09,106,1.531,108,2.67,109,1.933,118,1.531,120,2.136,121,2.136,176,2.348,180,2.965,182,1.531,184,1.259,208,2.136,234,3.102,267,2.965,268,3.918,269,3.918,270,4.746,271,4.746,272,3.758,273,3.102,274,3.102]],["title/classes/PatchUserDto.html",[13,0.018,275,1.894]],["body/classes/PatchUserDto.html",[3,0.52,4,0.448,5,0.448,7,0.629,8,0.037,12,0.52,13,0.025,20,0.031,21,0.031,106,1.714,176,2.628,203,2.34,205,2.989,269,4.201,274,3.473,275,3.179,276,3.473,277,5.089,278,3.473,279,3.473,280,3.473]],["title/controllers/PostsController.html",[0,1.12,281,1.894]],["body/controllers/PostsController.html",[0,0.876,2,0.876,3,0.293,4,0.253,5,0.253,7,0.593,8,0.038,9,0.591,12,0.293,13,0.014,15,1.067,17,1.129,18,1.835,20,0.021,21,0.021,49,0.479,50,1.729,51,1.242,53,2.248,58,1.684,63,1.183,64,1.183,65,1.183,66,1.183,78,3.132,83,2.278,84,2.044,85,1.129,86,1.668,93,1.412,105,2.784,110,2.462,118,1.835,120,2.507,140,2.462,182,0.966,184,1.51,267,3.127,273,2.861,281,2.165,282,1.957,283,2.371,284,2.861,285,4.506,286,3.466,287,2.861,288,2.371,289,2.371,290,2.371,291,2.371,292,2.371,293,3.466,294,2.861,295,1.957,296,2.861,297,2.371,298,2.371,299,2.371,300,3.381,301,2.371,302,1.957,303,1.684,304,2.044,305,1.957,306,3.381,307,1.957,308,1.957,309,1.957,310,2.371,311,2.371,312,1.957,313,1.957,314,1.957,315,1.957,316,2.371,317,1.957,318,1.957,319,2.371,320,2.371,321,2.371,322,2.371,323,2.371,324,2.371,325,1.684,326,2.371,327,2.371,328,2.371,329,2.861]],["title/modules/PostsModule.html",[22,1.12,35,1.686]],["body/modules/PostsModule.html",[2,1.658,3,0.426,4,0.367,5,0.367,7,0.678,8,0.037,9,0.859,12,0.426,13,0.02,20,0.028,21,0.028,22,1.844,24,1.551,25,1.551,26,1.916,27,1.916,28,1.551,29,2.776,30,1.916,35,3.23,36,2.578,37,2.496,38,1.916,39,1.719,41,2.804,73,2.844,74,2.448,75,1.155,281,3.118,304,2.858,305,2.844,330,2.844,331,3.445,332,2.844,333,3.445,334,3.445]],["title/injectables/PostsService.html",[46,1.12,304,1.513]],["body/injectables/PostsService.html",[3,0.282,4,0.243,5,0.243,7,0.416,8,0.038,9,0.568,12,0.282,13,0.014,15,1.026,17,1.638,18,1.631,20,0.021,21,0.021,46,1.244,47,1.268,49,0.461,50,1.68,51,1.3,53,2.207,63,1.68,64,1.138,65,1.138,66,1.138,75,1.712,78,3.108,81,1.882,83,2.459,84,2.207,85,1.219,86,1.801,93,2.081,97,1.882,99,1.424,100,1.68,101,1.882,102,1.424,103,1.882,110,4.079,117,4.559,120,1.516,201,2.78,208,2.41,256,1.424,284,2.78,287,2.78,304,1.68,329,2.78,335,1.882,336,4.422,337,3.367,338,2.28,339,3.367,340,2.28,341,2.28,342,2.28,343,3.367,344,2.28,345,3.367,346,2.28,347,2.393,348,2.28]],["title/controllers/UsersController.html",[0,1.12,349,1.894]],["body/controllers/UsersController.html",[0,0.454,2,0.454,3,0.152,4,0.131,5,0.131,7,0.496,8,0.038,9,0.307,12,0.152,13,0.016,15,0.553,17,1.384,18,1.842,20,0.013,21,0.013,49,0.248,50,1.03,51,0.961,53,1.739,58,0.874,63,0.614,64,0.614,65,0.614,66,0.614,74,0.874,75,0.895,78,2.792,83,1.938,84,2.257,85,1.42,86,1.42,93,1.715,99,1.29,100,2.423,102,2.357,118,1.537,120,1.569,121,1.699,128,3.734,129,3.734,131,2.222,140,1.467,173,0.553,176,1.29,182,0.501,184,1.683,189,0.874,195,1.29,203,1.938,206,3.381,207,3.381,208,2.529,247,2.825,248,2.585,254,1.739,256,1.667,259,1.705,266,3.475,275,2.177,278,1.705,294,1.705,295,1.015,296,1.705,300,2.204,302,3.837,303,0.874,306,2.204,307,1.015,308,1.015,309,1.015,312,1.015,313,1.015,314,1.015,315,1.015,317,1.015,318,1.015,325,0.874,347,2.682,349,1.29,350,1.015,351,2.204,352,2.67,353,2.67,354,2.065,355,2.67,356,2.67,357,1.23,358,4.378,359,3.486,360,3.486,361,1.23,362,3.127,363,1.23,364,1.23,365,1.23,366,1.23,367,1.705,368,1.23,369,1.23,370,2.581,371,1.23,372,2.065,373,2.065,374,1.23,375,1.23,376,2.065,377,1.23,378,2.065,379,1.23,380,1.705,381,1.23,382,1.23,383,1.23,384,2.065,385,2.065,386,2.065,387,2.67,388,2.204,389,1.015,390,1.015,391,2.065,392,2.065,393,3.774,394,1.23,395,1.23,396,1.23,397,2.065,398,2.065,399,1.23,400,1.23,401,1.23,402,1.015,403,1.23,404,1.23,405,1.23,406,1.23,407,1.23,408,2.065,409,1.23,410,1.23,411,1.23,412,1.23,413,1.23,414,1.23,415,1.23,416,2.065,417,2.065,418,1.23,419,1.23,420,1.015,421,1.23,422,2.065,423,1.23,424,1.23,425,1.015,426,1.23,427,1.015,428,1.23,429,1.015,430,1.23,431,1.23,432,1.23,433,1.23]],["title/modules/UsersModule.html",[22,1.12,36,1.365]],["body/modules/UsersModule.html",[2,1.646,3,0.421,4,0.363,5,0.363,7,0.651,8,0.037,9,0.849,12,0.551,13,0.02,20,0.027,21,0.027,22,1.834,24,2.006,25,1.534,26,1.895,27,1.895,28,1.534,29,2.762,30,2.762,34,2.224,36,2.571,37,2.478,38,1.895,39,1.7,41,2.129,71,2.784,75,2.02,349,3.102,389,2.813,434,2.813,435,2.813,436,2.813,437,3.408,438,3.408,439,3.408,440,3.408]],["title/injectables/UsersService.html",[46,1.12,75,1.016]],["body/injectables/UsersService.html",[3,0.243,4,0.209,5,0.209,7,0.452,8,0.038,9,0.49,12,0.243,13,0.022,15,0.884,17,0.541,18,1.226,20,0.019,21,0.019,46,1.112,47,1.092,49,0.397,50,1.502,51,1.008,53,2.047,60,2.186,63,1.502,64,0.98,65,0.98,66,0.98,71,1.227,75,1.009,78,2.595,79,1.621,83,2.035,84,2.424,85,1.008,86,1.802,93,2.136,96,1.621,98,1.621,99,1.88,100,2.329,134,2.139,184,1.226,191,2.485,208,2.537,216,2.485,217,3.021,247,2.915,248,2.916,254,2.46,256,1.227,303,2.915,347,2.139,351,4.329,367,3.852,370,2.485,380,2.485,390,1.621,427,2.485,441,1.621,442,3.01,443,3.01,444,3.01,445,3.01,446,3.01,447,3.66,448,3.01,449,1.964,450,1.964,451,1.964,452,1.964,453,4.102,454,3.01,455,3.01,456,3.66,457,3.01,458,3.01,459,3.01,460,2.485,461,3.01,462,1.964,463,1.964,464,1.964,465,1.964,466,1.964,467,1.964]],["title/coverage.html",[468,2.929]],["body/coverage.html",[0,1.868,1,1.922,5,0.328,6,2.54,8,0.037,10,1.535,13,0.033,20,0.026,21,0.026,28,1.385,46,1.868,48,2.54,56,1.922,57,2.54,60,1.385,75,1.031,77,2.54,85,0.848,105,1.711,107,2.959,108,2.959,124,1.922,177,2.186,193,2.54,197,2.54,203,1.711,204,2.54,205,2.959,245,2.186,246,2.54,254,1.711,255,2.54,267,1.922,268,2.54,275,1.922,276,2.54,281,1.922,282,2.54,304,1.535,325,2.186,335,2.54,349,1.922,350,2.54,402,4.954,441,2.54,468,2.186,469,2.54,470,3.077,471,5.057,472,4.164,473,4.72,474,2.54,475,3.077,476,3.077,477,3.077,478,3.077,479,4.72,480,3.077,481,3.077,482,3.077,483,3.077]],["title/dependencies.html",[25,1.639,484,2.096]],["body/dependencies.html",[8,0.038,9,1.013,13,0.03,20,0.031,21,0.031,25,1.829,173,1.829,179,2.887,182,1.655,279,3.354,280,3.354,388,3.354,460,3.354,485,4.064,486,4.064,487,5.389,488,4.064,489,4.064,490,4.064,491,4.064,492,4.064,493,4.064,494,4.064,495,4.064,496,4.064,497,4.064]],["title/miscellaneous/enumerations.html",[498,1.586,499,3.007]],["body/miscellaneous/enumerations.html",[8,0.038,20,0.028,21,0.028,49,0.701,112,3.723,113,3.723,120,2.03,141,3.723,144,3.723,195,3.818,248,2.508,498,2.168,499,2.864,500,3.47,501,3.47,502,3.47,503,4.51,504,5.304,505,4.51,506,3.47,507,4.51,508,4.51,509,4.51,510,4.51,511,4.51,512,4.51,513,3.47,514,3.47,515,3.47,516,4.51]],["title/miscellaneous/functions.html",[498,1.586,517,3.007]],["body/miscellaneous/functions.html",[8,0.033,20,0.033,21,0.033,28,2.561,49,0.933,474,3.81,498,2.883,517,3.81,518,4.616]],["title/index.html",[49,0.513,519,2.539,520,2.539]],["body/index.html",[4,0.231,8,0.036,20,0.02,21,0.02,39,2.42,102,1.356,121,1.943,184,0.727,189,3.672,190,1.792,192,1.542,420,1.792,425,1.792,429,1.792,468,1.542,469,2.68,521,2.17,522,2.17,523,3.889,524,3.247,525,2.17,526,2.17,527,2.17,528,2.17,529,3.247,530,3.889,531,2.17,532,2.17,533,4.317,534,2.17,535,5.168,536,2.17,537,5.027,538,2.17,539,2.17,540,2.17,541,3.247,542,2.17,543,3.247,544,2.17,545,3.889,546,2.17,547,3.247,548,2.17,549,2.17,550,2.17,551,2.17,552,2.17,553,4.317,554,4.849,555,3.247,556,2.17,557,2.17,558,2.17,559,2.17,560,4.849,561,3.247,562,4.317,563,2.17,564,3.247,565,2.17,566,3.247,567,4.621,568,4.317,569,2.17,570,3.247,571,2.17,572,2.17,573,2.17,574,2.17,575,4.317,576,2.17,577,2.17,578,2.17,579,2.17,580,2.17,581,3.247,582,2.17,583,2.17,584,2.17,585,2.17,586,2.17,587,3.247,588,2.17,589,2.17,590,2.17,591,3.247,592,2.17,593,2.17,594,3.563,595,3.247,596,2.17,597,2.17,598,2.17,599,2.17,600,2.17,601,2.17,602,2.17,603,2.17,604,3.247,605,2.17,606,2.17,607,2.17,608,2.17,609,3.889,610,2.17,611,2.17,612,2.17,613,2.17,614,3.247,615,2.17,616,2.17,617,2.17,618,2.17,619,2.17,620,3.247,621,2.17,622,2.17,623,2.17,624,3.247,625,3.247,626,2.17,627,2.17,628,2.17,629,2.17,630,2.17,631,2.17,632,2.17,633,2.17,634,2.17,635,2.17,636,2.17,637,1.792,638,2.17,639,2.17,640,2.17,641,2.17,642,2.17,643,2.17,644,1.792]],["title/modules.html",[24,1.856]],["body/modules.html",[8,0.032,20,0.032,21,0.032,23,2.712,24,1.954,34,2.167,35,2.414,36,1.954,594,4.742,645,5.745,646,5.745,647,5.745]],["title/overview.html",[648,3.403]],["body/overview.html",[2,1.215,8,0.037,10,2.436,20,0.027,21,0.027,22,1.215,23,3.671,24,1.481,25,1.481,26,1.829,27,1.829,28,1.481,29,1.829,30,1.829,31,2.716,32,2.716,33,2.716,34,2.771,35,3.15,36,2.549,37,2.422,38,1.829,39,1.642,47,1.829,60,2.549,67,2.716,68,2.716,69,2.716,75,1.898,106,1.34,304,2.436,330,2.716,332,2.716,434,2.716,435,2.716,436,2.716,648,2.716,649,4.881,650,3.29]],["title/properties.html",[109,1.484,484,2.096]],["body/properties.html",[8,0.037,20,0.033,21,0.033,109,1.853,184,1.525,637,3.756,644,3.756,651,4.55,652,4.55,653,4.55]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":652,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["0})@apiquery({name",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["1",{"_index":256,"title":{},"body":{"classes/GetUserParamsDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.26",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":259,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["10})@apiquery({name",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.1",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["123",{"_index":271,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["2",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["2.1.0",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["3/4",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["31t23:59:59z",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":649,"title":{},"body":{"overview.html":{}}}],["400",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["404",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["7",{"_index":650,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["8601",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["admin",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["age",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["allowing",{"_index":582,"title":{},"body":{"index.html":{}}}],["alter",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["amazing",{"_index":630,"title":{},"body":{"index.html":{}}}],["apiacceptedresponse",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({description",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{}}}],["apiquery",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":554,"title":{},"body":{"index.html":{}}}],["applications",{"_index":529,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":23,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["article",{"_index":509,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["associated",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":56,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":34,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":637,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":60,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":570,"title":{},"body":{"index.html":{}}}],["backers",{"_index":631,"title":{},"body":{"index.html":{}}}],["bad",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["board",{"_index":623,"title":{},"body":{"index.html":{}}}],["body",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brief",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["browse",{"_index":647,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":645,"title":{},"body":{"modules.html":{}}}],["building",{"_index":524,"title":{},"body":{"index.html":{}}}],["business",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["case",{"_index":514,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["casestudy",{"_index":513,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["channel",{"_index":597,"title":{},"body":{"index.html":{}}}],["character",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["character'})@apiproperty({description",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":560,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":581,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":565,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":330,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":331,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":332,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":434,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":435,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":436,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":588,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(body",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(createpostdto",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(headers",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(ip",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostdto",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(requestbody",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(usersservice",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["courses",{"_index":603,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":468,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["createpost",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(title",{"_index":339,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":105,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":124,"title":{"classes/CreatePostMetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":203,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserprofile",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserprofile(requestbody",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(requestbody",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.length",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["decorators",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":599,"title":{},"body":{"index.html":{}}}],["default",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1),parseintpipe",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10),parseintpipe",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deploy",{"_index":553,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":569,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":561,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":580,"title":{},"body":{"index.html":{}}}],["description",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":538,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":610,"title":{},"body":{"index.html":{}}}],["discord",{"_index":596,"title":{},"body":{"index.html":{}}}],["dive",{"_index":598,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":469,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["draft",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/create",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/getuserparams.dto",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":548,"title":{},"body":{"index.html":{}}}],["each",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":525,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":559,"title":{},"body":{"index.html":{}}}],["eight",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["endpoints",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["ensure",{"_index":557,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":613,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":499,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["excerpt",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["experience",{"_index":601,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":269,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["false})@type(undefined",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fast",{"_index":573,"title":{},"body":{"index.html":{}}}],["features",{"_index":584,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["fetched.'})@apiresponse({status",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["few",{"_index":575,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filter'})@apiquery({name",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["filtering",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["filterused",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["findallposts",{"_index":336,"title":{},"body":{"injectables/PostsService.html":{}}}],["findallusers",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["findallusers(params",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["findpostbyid",{"_index":337,"title":{},"body":{"injectables/PostsService.html":{}}}],["findpostbyid(id",{"_index":343,"title":{},"body":{"injectables/PostsService.html":{}}}],["finduserbyid",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid(id",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["focus",{"_index":583,"title":{},"body":{"index.html":{}}}],["follow",{"_index":617,"title":{},"body":{"index.html":{}}}],["format",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["found.'})@apiquery({name",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["found.'})@get('/:id",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["framework",{"_index":523,"title":{},"body":{"index.html":{}}}],["full",{"_index":612,"title":{},"body":{"index.html":{}}}],["function",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":517,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":578,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':id",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallposts",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallusers",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers(@query",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers(params",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpostbyid",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(@param('id",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostparamsdto",{"_index":245,"title":{"classes/GetPostParamsDto.html":{}},"body":{"classes/GetPostParamsDto.html":{},"coverage.html":{}}}],["getting",{"_index":519,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamsdto",{"_index":254,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":606,"title":{},"body":{"index.html":{}}}],["grouping",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["grow",{"_index":627,"title":{},"body":{"index.html":{}}}],["guide",{"_index":511,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hands",{"_index":600,"title":{},"body":{"index.html":{}}}],["handy",{"_index":589,"title":{},"body":{"index.html":{}}}],["headers",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":604,"title":{},"body":{"index.html":{}}}],["here",{"_index":635,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":641,"title":{},"body":{"index.html":{}}}],["id",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id,user,title",{"_index":348,"title":{},"body":{"injectables/PostsService.html":{}}}],["identifier",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":49,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":563,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":586,"title":{},"body":{"index.html":{}}}],["inject",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":46,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":47,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injection",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["install",{"_index":577,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":536,"title":{},"body":{"index.html":{}}}],["interact",{"_index":607,"title":{},"body":{"index.html":{}}}],["interview",{"_index":512,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ip",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isauthenticated(token",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":264,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["isiso8601",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@apiproperty({description",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{}}}],["isnotempty()@apiproperty({description",{"_index":200,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["isnotempty()@isenum(poststatus)@apiproperty({description",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty()@isenum(posttype)@apiproperty({description",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["iso",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isint",{"_index":262,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["isoptional()@isnotempty",{"_index":249,"title":{},"body":{"classes/GetPostParamsDto.html":{}}}],["isoptional()@isnotempty()@ispositive",{"_index":251,"title":{},"body":{"classes/GetPostParamsDto.html":{}}}],["ispositive",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{}}}],["ispositive()@isnotempty()@apiproperty({description",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty({description",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(10)@apiproperty({description",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(50)@apiproperty({description",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(6)@apiproperty({description",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(6)@matches(/((?=.*\\d)(?=.*[a",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["items",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["jane",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":620,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":622,"title":{},"body":{"index.html":{}}}],["john",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["john@email.com",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":633,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":638,"title":{},"body":{"index.html":{}}}],["key",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"index.html":{}}}],["learn",{"_index":592,"title":{},"body":{"index.html":{}}}],["legend",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":644,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":625,"title":{},"body":{"index.html":{}}}],["limit",{"_index":247,"title":{},"body":{"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":619,"title":{},"body":{"index.html":{}}}],["list",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["logic",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":564,"title":{},"body":{"index.html":{}}}],["loop",{"_index":615,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makes",{"_index":571,"title":{},"body":{"index.html":{}}}],["managing",{"_index":585,"title":{},"body":{"index.html":{}}}],["matches",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/((?=.*\\d)(?=.*[a",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":567,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(50",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meta",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["metaoptions",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(10",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(2",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(3",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(6",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":498,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":624,"title":{},"body":{"index.html":{}}}],["mode",{"_index":541,"title":{},"body":{"index.html":{}}}],["module",{"_index":22,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":562,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":639,"title":{},"body":{"index.html":{}}}],["name",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["needed",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["nest",{"_index":530,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":643,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":279,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":579,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["news",{"_index":508,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["node.js",{"_index":522,"title":{},"body":{"index.html":{}}}],["number",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number})@isoptional()@isint",{"_index":260,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["number})@isoptional()@isint()@type(undefined",{"_index":257,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["object",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":621,"title":{},"body":{"index.html":{}}}],["official",{"_index":568,"title":{},"body":{"index.html":{}}}],["offset",{"_index":266,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["one",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":626,"title":{},"body":{"index.html":{}}}],["option",{"_index":198,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["option.dto",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option.dto.ts",{"_index":197,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["option.dto.ts:11",{"_index":202,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["option.dto.ts:8",{"_index":199,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["optional",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":648,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p@ssw0rd",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["package",{"_index":484,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":248,"title":{},"body":{"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["page'})@apiacceptedresponse({description",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.limit",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["params.page",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":611,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":274,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":270,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":277,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":267,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuserdto",{"_index":275,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{}}}],["platform",{"_index":566,"title":{},"body":{"index.html":{}}}],["please",{"_index":595,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":535,"title":{},"body":{"index.html":{}}}],["possible",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["post",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post.dto",{"_index":273,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:22",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:27",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:32",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:37",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:58",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:66",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:8",{"_index":272,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:98",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postmeta",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["posts",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":334,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":281,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":35,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":304,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":543,"title":{},"body":{"index.html":{}}}],["profile",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["progressive",{"_index":521,"title":{},"body":{"index.html":{}}}],["project",{"_index":533,"title":{},"body":{"index.html":{}}}],["properties",{"_index":109,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provided",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":505,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('age",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('offset",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page',new",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('role",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":593,"title":{},"body":{"index.html":{}}}],["read",{"_index":634,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":552,"title":{},"body":{"index.html":{}}}],["real",{"_index":608,"title":{},"body":{"index.html":{}}}],["recommended",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["reflect",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":532,"title":{},"body":{"index.html":{}}}],["req",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["request.'})@apiresponse({status",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["requestbody",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":574,"title":{},"body":{"index.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":587,"title":{},"body":{"index.html":{}}}],["results",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":504,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["role",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":537,"title":{},"body":{"index.html":{}}}],["runs",{"_index":558,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":201,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"injectables/PostsService.html":{}}}],["sample_token_123",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":526,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":503,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["series",{"_index":516,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":527,"title":{},"body":{"index.html":{}}}],["set",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["setup",{"_index":534,"title":{},"body":{"index.html":{}}}],["side",{"_index":528,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":576,"title":{},"body":{"index.html":{}}}],["skip",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["slug",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["something",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sponsors",{"_index":629,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":518,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":500,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":501,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":439,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:14",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:22",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":474,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["src/posts/dtos/getpostparams.dto.ts",{"_index":246,"title":{},"body":{"classes/GetPostParamsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/getpostparams.dto.ts:11",{"_index":252,"title":{},"body":{"classes/GetPostParamsDto.html":{}}}],["src/posts/dtos/getpostparams.dto.ts:16",{"_index":253,"title":{},"body":{"classes/GetPostParamsDto.html":{}}}],["src/posts/dtos/getpostparams.dto.ts:6",{"_index":250,"title":{},"body":{"classes/GetPostParamsDto.html":{}}}],["src/posts/dtos/patch",{"_index":268,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":502,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":506,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:15",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:24",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:29",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:35",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":333,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":335,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:13",{"_index":344,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:18",{"_index":340,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:22",{"_index":346,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":338,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:9",{"_index":341,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparams.dto.ts",{"_index":255,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparams.dto.ts:15",{"_index":258,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["src/users/dtos/getuserparams.dto.ts:26",{"_index":261,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["src/users/dtos/getuserparams.dto.ts:30",{"_index":263,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["src/users/dtos/patch",{"_index":276,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:22",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:49",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:8",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:35",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:73",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:85",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":437,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":539,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":542,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":544,"title":{},"body":{"index.html":{}}}],["started",{"_index":520,"title":{"index.html":{}},"body":{}}],["starter",{"_index":531,"title":{},"body":{"index.html":{}}}],["statements",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":614,"title":{},"body":{"index.html":{}}}],["steps",{"_index":555,"title":{},"body":{"index.html":{}}}],["story",{"_index":507,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":572,"title":{},"body":{"index.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["study",{"_index":515,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["successfully",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":594,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":646,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["table",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":556,"title":{},"body":{"index.html":{}}}],["test",{"_index":547,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":550,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":549,"title":{},"body":{"index.html":{}}}],["tests",{"_index":545,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":628,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauthenticated(\"sample_token_123",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.createpost('new",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findallposts",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findpostbyid(id",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(1",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findallusers(params",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyid(1",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["time",{"_index":609,"title":{},"body":{"index.html":{}}}],["title",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":636,"title":{},"body":{"index.html":{}}}],["transform",{"_index":265,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["transformer",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"dependencies.html":{}}}],["true",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@apipropertyoptional({description",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@minlength(2",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tutorial",{"_index":510,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["twitter",{"_index":642,"title":{},"body":{"index.html":{}}}],["type",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":280,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["ui",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["undefined",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":546,"title":{},"body":{"index.html":{}}}],["unless",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["unlicensed",{"_index":653,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(id",{"_index":345,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(patchpostdto",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":616,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(body",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["uppercase",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["use",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{}}}],["used",{"_index":440,"title":{},"body":{"modules/UsersModule.html":{}}}],["user",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":278,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:20",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["users",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":438,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":349,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":36,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":75,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["validate",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["validatenested",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostParamsDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["value",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":651,"title":{},"body":{"properties.html":{}}}],["video",{"_index":602,"title":{},"body":{"index.html":{}}}],["visit",{"_index":591,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":605,"title":{},"body":{"index.html":{}}}],["void",{"_index":342,"title":{},"body":{"injectables/PostsService.html":{}}}],["watch",{"_index":540,"title":{},"body":{"index.html":{}}}],["website",{"_index":640,"title":{},"body":{"index.html":{}}}],["whole",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["working",{"_index":590,"title":{},"body":{"index.html":{}}}],["world",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":618,"title":{},"body":{"index.html":{}}}],["yes",{"_index":347,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["you'd",{"_index":632,"title":{},"body":{"index.html":{}}}],["you're",{"_index":551,"title":{},"body":{"index.html":{}}}],["z])(?=.*[\\w]).{6,20",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  // Get\n} from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        private readonly authService: AuthService // dependency injection\n    ){}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(()=> UsersModule)], // import UsersModule to use UsersService in AuthService\nexports: [AuthService], // export AuthService if needed in other modules\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { token: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService // dependency injection\n    ) { }\n    \n\n\n    public login(email: string, password: string, id: string) {\n     const user = this.usersService.findUserById(1); // using UsersService method\n        return {\n            token: \"sample_token_123\",\n        }\n    }\n\n\n    public isAuthenticated(token: string) {\n        return token === \"sample_token_123\";\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                PublishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(10)@ApiProperty({description: 'Content of the post', example: 'This is the content of my first post.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Excerpt of the post', example: 'This is a brief excerpt of my first post.', required: false, type: 'array', items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@ApiPropertyOptional({description: 'Meta options for the post', type: undefined, required: false})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(PostStatus)@ApiProperty({description: 'Status of the post', example: 'draft'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(PostType)@ApiProperty({description: 'Type of the post', example: 'blog'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        PublishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@ApiProperty({description: 'Publish date of the post in ISO 8601 format', example: '2024-12-31T23:59:59Z', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Slug of the post', example: 'my-first-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsString({each: true})@MinLength(2, {each: true})@ApiPropertyOptional({description: 'Tags of the post', example: undefined, required: false, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)@ApiProperty({description: 'Title of the post', example: 'My First Post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/postType.enum';\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionDto } from './create-postMeta-Option.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  @ApiProperty({ description: 'Title of the post', example: 'My First Post' })\n  title: string;\n\n  @IsNotEmpty()\n  @IsEnum(PostType)\n  @ApiProperty({ description: 'Type of the post', example: 'blog' })\n  postType: PostType;\n\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  @ApiProperty({ description: 'Status of the post', example: 'draft' })\n  postStatus: PostStatus;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'Slug of the post', example: 'my-first-post' })\n  slug: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(10)\n  @ApiProperty({\n    description: 'Content of the post',\n    example: 'This is the content of my first post.',\n  })\n  content: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(2, { each: true })\n  @ApiPropertyOptional({\n    description: 'Tags of the post',\n    example: ['nestjs', 'typescript'],\n    required: false,\n    isArray: true,\n  })\n  tags?: string[];\n\n  @IsISO8601()\n  @ApiProperty({\n    description: 'Publish date of the post in ISO 8601 format',\n    example: '2024-12-31T23:59:59Z',\n    required: false,\n  })\n  PublishOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Excerpt of the post',\n    example: 'This is a brief excerpt of my first post.',\n    required: false,\n    type: 'array',\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description: 'This key can be any string identifier for meta options',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'string',\n          description: 'This value can be any string value associated with the key',\n          example: 'true',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @ApiPropertyOptional({\n    description: 'Meta options for the post',\n    type: [CreatePostMetaOptionDto],\n    required: false,\n  })\n  @Type(() => CreatePostMetaOptionDto)\n  metaOptions: CreatePostMetaOptionDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionDto.html":{"url":"classes/CreatePostMetaOptionDto.html","title":"class - CreatePostMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-postMeta-Option.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Key of the meta option', example: 'description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-postMeta-Option.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({description: 'Value of the meta option', example: 'This is a sample post description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-postMeta-Option.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionDto { \n    @IsString()\n    @IsNotEmpty()\n        @ApiProperty({ description: 'Key of the meta option', example: 'description' })\n    key: string;\n    @IsNotEmpty()\n        @ApiProperty({ description: 'Value of the meta option', example: 'This is a sample post description' })\n    value: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsNotEmpty()@ApiProperty({description: 'Age of the user', example: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty({description: 'Email of the user', example: 'john@email.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(50)@ApiProperty({description: 'Name of the user', example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(6)@Matches(/((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W]).{6,20})/, {message: 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character'})@ApiProperty({description: 'Password of the user', example: 'P@ssw0rd'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Role of the user', example: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsPositive, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(50)\n    @ApiProperty({ description: 'Name of the user', example: 'John Doe' })\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ description: 'Email of the user', example: 'john@email.com' })\n    email: string;\n  \n  @IsPositive()\n    @IsNotEmpty()\n    @ApiProperty({ description: 'Age of the user', example: 25 })\n  age: number;\n  @ApiProperty({ description: 'Role of the user', example: 'admin' })\n  role: string;\n  \n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  @Matches(/((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W]).{6,20})/, {\n    message: 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\n  })\n    @ApiProperty({ description: 'Password of the user', example: 'P@ssw0rd' })\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostParamsDto.html":{"url":"classes/GetPostParamsDto.html","title":"class - GetPostParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/getPostParams.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/getPostParams.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/getPostParams.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/getPostParams.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsPositive } from \"class-validator\";\n\nexport class GetPostParamsDto {\n  @IsOptional()\n  @IsNotEmpty()\n    id?: number;\n    \n  @IsOptional()\n  @IsNotEmpty()\n  @IsPositive()\n  limit?: string;\n  \n    @IsOptional()\n  @IsNotEmpty()\n  @IsPositive()\n  page?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/getUserParams.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | undefined\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The ID of the user', example: 1, type: Number})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/getUserParams.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Number of items to return', example: 10, type: Number})@IsOptional()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/getUserParams.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/getUserParams.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class GetUserParamsDto {\n  @ApiPropertyOptional({\n    description: 'The ID of the user',\n    example: 1,\n    type: Number,\n  }\n  )\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) // to transform the string to number\n  id: number | undefined;\n  //   role?: string;\n  //   age?: number;\n  @ApiPropertyOptional({\n    description: 'Number of items to return',\n    example: 10,\n    type: Number,\n  }\n  )\n  @IsOptional()\n  @IsInt()\n  limit?: number;\n  //   offset?: number;\n  @IsOptional()\n  @IsInt()\n  page?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the post', example: '123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from \"./create-post.dto\";\nimport { ApiProperty, PartialType } from \"@nestjs/swagger\";\n\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({ description: 'ID of the post', example: '123' })\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from \"./create-user.dto\";\nimport { PartialType } from \"@nestjs/mapped-types\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getPostById\n                            \n                            \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'The post has been successfully fetched.'})@ApiResponse({status: 404, description: 'Post not found.'})@Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts') // grouping the endpoints in swagger ui\nexport class PostsController {\n    constructor(\n        private readonly postsService: PostsService, // dependency injection\n    ){}\n\n    @Get()\n    public getAllPosts() {\n        return this.postsService.findAllPosts();\n    }\n\n    @ApiResponse({ status: 200, description: 'The post has been successfully fetched.' })\n    @ApiResponse({ status: 404, description: 'Post not found.' })\n        \n\n    @Get('/:id')\n    public getPostById(@Param('id') id: string) {\n        return this.postsService.findPostById(id);\n    }\n\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto) {\n        console.log(createPostDto);\n        return this.postsService.createPost('New Post', 'This is the content of the new post.');\n    }\n\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        console.log(patchPostDto);\n        return this.postsService.updatePost(1, 'Updated Post', 'This is the updated content of the post.');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule] // import UsersModule to use UsersService in PostsService\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAllPosts\n                            \n                            \n                                    Public\n                                findPostById\n                            \n                            \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(title: string, content: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; title: string; content: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPostById(id: number | string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string | number; user: any; title: string; content: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: number, title?: string, content?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; title: string; content: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UsersService } from \"src/users/providers/users.service\";\n\n@Injectable()\nexport class PostsService {\n    constructor(\n        private readonly usersService : UsersService // dependency injection\n    ){}\n    public findAllPosts() { \n\n    }\n\n    public findPostById(id: number | string) {\n     const user = this.usersService.findUserById(1); // using UsersService method\n        return { id,user,title: 'Sample Post', content: 'This is a sample post content.' }; \n    }\n\n    public createPost(title: string, content: string) {\n        return { id: 1, title, content };\n    }\n\n    public updatePost(id: number, title?: string, content?: string) {\n        return { id, title: title || 'Updated Title', content: content || 'Updated Content' };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUserProfile\n                            \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    Public\n                                getAllUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserById\n                            \n                            \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUserProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUserProfile(requestBody: Request, headers: any, ip: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(requestBody: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestBody\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(params: GetUserParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id?: string, role?: string, age?: number, limit?: number, offset?: number, page?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get user by ID or filter by role, age, limit, offset, page'})@ApiAcceptedResponse({description: 'The user has been successfully fetched.'})@ApiResponse({status: 400, description: 'Bad Request.'})@ApiResponse({status: 404, description: 'User not found.'})@ApiQuery({name: 'role', required: false, type: String, description: 'Role of the user to filter'})@ApiQuery({name: 'age', required: false, type: Number, description: 'Age of the user to filter'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Number of items to return', example: 10})@ApiQuery({name: 'offset', required: false, type: Number, description: 'Number of items to skip', example: 0})@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number for pagination', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                age\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(body: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, Req } from '@nestjs/common';\nimport { Request } from 'express';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { GetUserParamsDto } from './dtos/getUserParams.dto';\nimport { ApiAcceptedResponse, ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n  @ApiTags('Users') // grouping the endpoints in swagger ui\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService, // dependency injection\n  ){}\n  \n  @Get()\n  public getAllUsers(@Query() params: GetUserParamsDto) {\n    const limit: number = params.limit ? params.limit : 10;\n    const page: number = params.page ? params.page : 1;\n    return this.usersService.findAllUsers(params, limit, page);\n  }\n  \n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get user by ID or filter by role, age, limit, offset, page' })\n  @ApiAcceptedResponse({ description: 'The user has been successfully fetched.' })\n    @ApiResponse({ status: 400, description: 'Bad Request.' })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n    @ApiQuery({ name: 'role', required: false, type: String, description: 'Role of the user to filter' })\n    @ApiQuery({ name: 'age', required: false, type: Number, description: 'Age of the user to filter' })\n    @ApiQuery({ name: 'limit', required: false, type: Number, description: 'Number of items to return', example: 10 })\n    @ApiQuery({ name: 'offset', required: false, type: Number, description: 'Number of items to skip', example: 0 })\n    @ApiQuery({ name: 'page', required: false, type: Number, description: 'Page number for pagination', example: 1 })\n  \n      public getUserById(\n    @Param('id') id?: string,\n    @Query('role') role?: string,\n    @Query('age') age?: number,\n    // using DefaultValuePipe to set default value if no value is provided in query\n    // using ParseIntPipe to convert string to number\n    @Query('limit', new DefaultValuePipe(10),ParseIntPipe) limit?: number,\n    @Query('offset') offset?: number,\n    @Query('page',new DefaultValuePipe(1),ParseIntPipe) page?: number,\n  ) {\n    console.log({ limit, offset, page });\n    if (id) {\n      return `User with id: ${id}`;\n    }\n    if (role) {\n      return `Users with role: ${role}`;\n    }\n    if (age) {\n      return `Users with age: ${age}`;\n    }\n    return 'No id provided';\n  }\n\n  @Post()\n\n  // using @body decorator to get the whole body\n  public createUsers(\n    // using ValidationPipe to validate the request body based on the dto class-validator decorators and use the createUserDto class to type as type the request body\n    @Body() requestBody: CreateUserDto,\n  ) {\n    console.log(requestBody);\n    return 'Create user';\n  }\n\n  @Post()\n\n      // using @Req decorator for using express request to get the whole body\n       // ! not recommended, unless you need something specific from express like alter the request what not possible with nestjs \n  public createUserProfile(\n    @Req() requestBody: Request,\n    @Headers() headers: any,\n    @Ip() ip: string,\n  ) {\n    console.log(ip);\n    console.log(headers);\n    console.log(requestBody);\n    return 'Create user profile';\n  }\n\n  @Patch()\n  public updateUser(\n     @Body() body: PatchUserDto\n  ) {\n   console.log(body);\n    return body;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService], // export UsersService to be used in other modules\nimports: [forwardRef(()=> AuthModule)]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                class to connect users tables and perform business logic\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAllUsers\n                            \n                            \n                                    Public\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers(params: GetUserParamsDto, limit?: number, page?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:22\n                        \n                    \n\n\n            \n                \n                        find all users with optional pagination and filtering\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    : params to filter users\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    : number of users per page\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    : page number\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { data: {}; meta: { limit: number; page: number; total: any; }; filterUsed: GetUserParamsDto; }\n\n                        \n                            \n                                : list of users with metadata\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:49\n                        \n                    \n\n\n            \n                \n                        find specific user by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    : user id\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; name: string; }\n\n                        \n                            \n                                : user object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthService } from 'src/auth/providers/auth.service';\nimport { GetUserParamsDto } from './../dtos/getUserParams.dto';\nimport { forwardRef, Inject, Injectable } from \"@nestjs/common\";\n/**\n * class to connect users tables and perform business logic\n */\n@Injectable()\nexport class UsersService {\n\n    constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService // dependency injection\n) { }\n\n    /**\n     * find all users with optional pagination and filtering\n     * @param params : params to filter users\n     * @param limit : number of users per page\n     * @param page : page number\n     * @returns : list of users with metadata\n     */\n    public findAllUsers(\n        params: GetUserParamsDto,\n        limit?: number,\n        page?: number,\n    ) {\n        // const isAuthenticated = this.authService.isAuthenticated(\"sample_token_123\");\n        const data = [\n            { id: 1, name: 'John Doe' },\n            { id: 2, name: 'Jane Doe' },\n        ];\n        return {\n            data,\n            meta: {\n                limit,\n                page,\n                total: data.length\n            },\n            filterUsed: params\n        };\n    }\n\n/**\n * find specific user by id\n * @param id : user id\n * @returns : user object\n */\n\n    public findUserById(id: number) {\nreturn { id, name: 'John Doe' }; \n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-postMeta-Option.dto.ts\n            \n            class\n            CreatePostMetaOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/getPostParams.dto.ts\n            \n            class\n            GetPostParamsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/getUserParams.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 NEWS\n                            \n                        \n                        \n                            \n                                Value : news\n                            \n                        \n                        \n                            \n                                 ARTICLE\n                            \n                        \n                        \n                            \n                                Value : article\n                            \n                        \n                        \n                            \n                                 BLOG\n                            \n                        \n                        \n                            \n                                Value : blog\n                            \n                        \n                        \n                            \n                                 TUTORIAL\n                            \n                        \n                        \n                            \n                                Value : tutorial\n                            \n                        \n                        \n                            \n                                 GUIDE\n                            \n                        \n                        \n                            \n                                Value : guide\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 INTERVIEW\n                            \n                        \n                        \n                            \n                                Value : interview\n                            \n                        \n                        \n                            \n                                 CASESTUDY\n                            \n                        \n                        \n                            \n                                Value : case-study\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ pnpm installCompile and run the project\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodRun tests\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ pnpm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
